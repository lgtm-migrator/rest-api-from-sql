// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/SalesPerson")]
    [ApiController]
    public class Sales_SalesPersonController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_SalesPersonController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_SalesPerson")]
        public async Task<ActionResult<IEnumerable<Sales.SalesPerson>>> ListSalesPerson(int pageIndex, int pageSize)
        {
            return await _db.Sales_SalesPerson.OrderBy(x => x.BusinessEntityID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{businessEntityID}", Name = "GetById_Sales_SalesPerson")]
        public async Task<ActionResult<Sales.SalesPerson>> GetSalesPerson(int businessEntityID)
        {
            var result = await _db.Sales_SalesPerson.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_SalesPerson")]
        public async Task<IActionResult> CreateSalesPerson([FromBody] Sales.SalesPerson value)
        {
            _db.Sales_SalesPerson.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{businessEntityID}", Name = "Edit_Sales_SalesPerson")]
        public async Task<IActionResult> EditSalesPerson(int businessEntityID, [FromBody] Sales.SalesPerson value)
        {
            var existing = await _db.Sales_SalesPerson.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.BusinessEntityID = value.BusinessEntityID;
			existing.TerritoryID = value.TerritoryID;
			existing.SalesQuota = value.SalesQuota;
			existing.Bonus = value.Bonus;
			existing.CommissionPct = value.CommissionPct;
			existing.SalesYTD = value.SalesYTD;
			existing.SalesLastYear = value.SalesLastYear;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_SalesPerson.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_SalesPerson")]
        public async Task<IActionResult> DeleteSalesPerson(int businessEntityID)
        {
            var existing = await _db.Sales_SalesPerson.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_SalesPerson.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}