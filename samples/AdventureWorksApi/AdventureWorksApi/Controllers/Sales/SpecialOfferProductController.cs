// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/SpecialOfferProduct")]
    [ApiController]
    public class Sales_SpecialOfferProductController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_SpecialOfferProductController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_SpecialOfferProduct")]
        public async Task<ActionResult<IEnumerable<Sales.SpecialOfferProduct>>> ListSpecialOfferProduct(int pageIndex, int pageSize)
        {
            return await _db.Sales_SpecialOfferProduct.OrderBy(x => x.ProductID).ThenBy(x => x.SpecialOfferID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("productID/{productID}/specialOfferID/{specialOfferID}", Name = "GetById_Sales_SpecialOfferProduct")]
        public async Task<ActionResult<Sales.SpecialOfferProduct>> GetSpecialOfferProduct(int productID, int specialOfferID)
        {
            var result = await _db.Sales_SpecialOfferProduct.FirstOrDefaultAsync(x => x.ProductID == productID && x.SpecialOfferID == specialOfferID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_SpecialOfferProduct")]
        public async Task<IActionResult> CreateSpecialOfferProduct([FromBody] Sales.SpecialOfferProduct value)
        {
            _db.Sales_SpecialOfferProduct.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("productID/{productID}/specialOfferID/{specialOfferID}", Name = "Edit_Sales_SpecialOfferProduct")]
        public async Task<IActionResult> EditSpecialOfferProduct(int productID, int specialOfferID, [FromBody] Sales.SpecialOfferProduct value)
        {
            var existing = await _db.Sales_SpecialOfferProduct.FirstOrDefaultAsync(x => x.ProductID == productID && x.SpecialOfferID == specialOfferID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.SpecialOfferID = value.SpecialOfferID;
			existing.ProductID = value.ProductID;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_SpecialOfferProduct.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_SpecialOfferProduct")]
        public async Task<IActionResult> DeleteSpecialOfferProduct(int productID, int specialOfferID)
        {
            var existing = await _db.Sales_SpecialOfferProduct.FirstOrDefaultAsync(x => x.ProductID == productID && x.SpecialOfferID == specialOfferID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_SpecialOfferProduct.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}