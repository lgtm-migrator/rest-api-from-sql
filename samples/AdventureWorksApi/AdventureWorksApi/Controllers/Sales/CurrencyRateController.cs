// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/CurrencyRate")]
    [ApiController]
    public class Sales_CurrencyRateController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_CurrencyRateController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_CurrencyRate")]
        public async Task<ActionResult<IEnumerable<Sales.CurrencyRate>>> ListCurrencyRate(int pageIndex, int pageSize)
        {
            return await _db.Sales_CurrencyRate.OrderBy(x => x.CurrencyRateID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{currencyRateID}", Name = "GetById_Sales_CurrencyRate")]
        public async Task<ActionResult<Sales.CurrencyRate>> GetCurrencyRate(int currencyRateID)
        {
            var result = await _db.Sales_CurrencyRate.FirstOrDefaultAsync(x => x.CurrencyRateID == currencyRateID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_CurrencyRate")]
        public async Task<IActionResult> CreateCurrencyRate([FromBody] Sales.CurrencyRate value)
        {
            _db.Sales_CurrencyRate.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{currencyRateID}", Name = "Edit_Sales_CurrencyRate")]
        public async Task<IActionResult> EditCurrencyRate(int currencyRateID, [FromBody] Sales.CurrencyRate value)
        {
            var existing = await _db.Sales_CurrencyRate.FirstOrDefaultAsync(x => x.CurrencyRateID == currencyRateID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.CurrencyRateID = value.CurrencyRateID;
			existing.CurrencyRateDate = value.CurrencyRateDate;
			existing.FromCurrencyCode = value.FromCurrencyCode;
			existing.ToCurrencyCode = value.ToCurrencyCode;
			existing.AverageRate = value.AverageRate;
			existing.EndOfDayRate = value.EndOfDayRate;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_CurrencyRate.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_CurrencyRate")]
        public async Task<IActionResult> DeleteCurrencyRate(int currencyRateID)
        {
            var existing = await _db.Sales_CurrencyRate.FirstOrDefaultAsync(x => x.CurrencyRateID == currencyRateID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_CurrencyRate.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}