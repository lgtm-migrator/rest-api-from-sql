// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/TrackingEvent")]
    [ApiController]
    public class Sales_TrackingEventController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_TrackingEventController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_TrackingEvent")]
        public async Task<ActionResult<IEnumerable<Sales.TrackingEvent>>> ListTrackingEvent(int pageIndex, int pageSize)
        {
            return await _db.Sales_TrackingEvent.OrderBy(x => x.TrackingEventID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{trackingEventID}", Name = "GetById_Sales_TrackingEvent")]
        public async Task<ActionResult<Sales.TrackingEvent>> GetTrackingEvent(int trackingEventID)
        {
            var result = await _db.Sales_TrackingEvent.FirstOrDefaultAsync(x => x.TrackingEventID == trackingEventID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_TrackingEvent")]
        public async Task<IActionResult> CreateTrackingEvent([FromBody] Sales.TrackingEvent value)
        {
            _db.Sales_TrackingEvent.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{trackingEventID}", Name = "Edit_Sales_TrackingEvent")]
        public async Task<IActionResult> EditTrackingEvent(int trackingEventID, [FromBody] Sales.TrackingEvent value)
        {
            var existing = await _db.Sales_TrackingEvent.FirstOrDefaultAsync(x => x.TrackingEventID == trackingEventID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.TrackingEventID = value.TrackingEventID;
			existing.EventName = value.EventName;

            _db.Sales_TrackingEvent.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_TrackingEvent")]
        public async Task<IActionResult> DeleteTrackingEvent(int trackingEventID)
        {
            var existing = await _db.Sales_TrackingEvent.FirstOrDefaultAsync(x => x.TrackingEventID == trackingEventID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_TrackingEvent.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}