// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/CountryRegionCurrency")]
    [ApiController]
    public class Sales_CountryRegionCurrencyController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_CountryRegionCurrencyController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_CountryRegionCurrency")]
        public async Task<ActionResult<IEnumerable<Sales.CountryRegionCurrency>>> ListCountryRegionCurrency(int pageIndex, int pageSize)
        {
            return await _db.Sales_CountryRegionCurrency.OrderBy(x => x.CountryRegionCode).ThenBy(x => x.CurrencyCode).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("countryRegionCode/{countryRegionCode}/currencyCode/{currencyCode}", Name = "GetById_Sales_CountryRegionCurrency")]
        public async Task<ActionResult<Sales.CountryRegionCurrency>> GetCountryRegionCurrency(string countryRegionCode, string currencyCode)
        {
            var result = await _db.Sales_CountryRegionCurrency.FirstOrDefaultAsync(x => x.CountryRegionCode == countryRegionCode && x.CurrencyCode == currencyCode);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_CountryRegionCurrency")]
        public async Task<IActionResult> CreateCountryRegionCurrency([FromBody] Sales.CountryRegionCurrency value)
        {
            _db.Sales_CountryRegionCurrency.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("countryRegionCode/{countryRegionCode}/currencyCode/{currencyCode}", Name = "Edit_Sales_CountryRegionCurrency")]
        public async Task<IActionResult> EditCountryRegionCurrency(string countryRegionCode, string currencyCode, [FromBody] Sales.CountryRegionCurrency value)
        {
            var existing = await _db.Sales_CountryRegionCurrency.FirstOrDefaultAsync(x => x.CountryRegionCode == countryRegionCode && x.CurrencyCode == currencyCode);
            if (existing == null)
            {
                return NotFound();
            }

			existing.CountryRegionCode = value.CountryRegionCode;
			existing.CurrencyCode = value.CurrencyCode;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_CountryRegionCurrency.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_CountryRegionCurrency")]
        public async Task<IActionResult> DeleteCountryRegionCurrency(string countryRegionCode, string currencyCode)
        {
            var existing = await _db.Sales_CountryRegionCurrency.FirstOrDefaultAsync(x => x.CountryRegionCode == countryRegionCode && x.CurrencyCode == currencyCode);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_CountryRegionCurrency.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}