// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/SalesTerritoryHistory")]
    [ApiController]
    public class Sales_SalesTerritoryHistoryController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_SalesTerritoryHistoryController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_SalesTerritoryHistory")]
        public async Task<ActionResult<IEnumerable<Sales.SalesTerritoryHistory>>> ListSalesTerritoryHistory(int pageIndex, int pageSize)
        {
            return await _db.Sales_SalesTerritoryHistory.OrderBy(x => x.BusinessEntityID).ThenBy(x => x.StartDate).ThenBy(x => x.TerritoryID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("businessEntityID/{businessEntityID}/startDate/{startDate}/territoryID/{territoryID}", Name = "GetById_Sales_SalesTerritoryHistory")]
        public async Task<ActionResult<Sales.SalesTerritoryHistory>> GetSalesTerritoryHistory(int businessEntityID, DateTime startDate, int territoryID)
        {
            var result = await _db.Sales_SalesTerritoryHistory.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.StartDate == startDate && x.TerritoryID == territoryID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_SalesTerritoryHistory")]
        public async Task<IActionResult> CreateSalesTerritoryHistory([FromBody] Sales.SalesTerritoryHistory value)
        {
            _db.Sales_SalesTerritoryHistory.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("businessEntityID/{businessEntityID}/startDate/{startDate}/territoryID/{territoryID}", Name = "Edit_Sales_SalesTerritoryHistory")]
        public async Task<IActionResult> EditSalesTerritoryHistory(int businessEntityID, DateTime startDate, int territoryID, [FromBody] Sales.SalesTerritoryHistory value)
        {
            var existing = await _db.Sales_SalesTerritoryHistory.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.StartDate == startDate && x.TerritoryID == territoryID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.BusinessEntityID = value.BusinessEntityID;
			existing.TerritoryID = value.TerritoryID;
			existing.StartDate = value.StartDate;
			existing.EndDate = value.EndDate;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_SalesTerritoryHistory.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_SalesTerritoryHistory")]
        public async Task<IActionResult> DeleteSalesTerritoryHistory(int businessEntityID, DateTime startDate, int territoryID)
        {
            var existing = await _db.Sales_SalesTerritoryHistory.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.StartDate == startDate && x.TerritoryID == territoryID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_SalesTerritoryHistory.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}