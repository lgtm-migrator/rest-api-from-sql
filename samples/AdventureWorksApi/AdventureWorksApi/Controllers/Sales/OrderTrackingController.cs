// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/OrderTracking")]
    [ApiController]
    public class Sales_OrderTrackingController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_OrderTrackingController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_OrderTracking")]
        public async Task<ActionResult<IEnumerable<Sales.OrderTracking>>> ListOrderTracking(int pageIndex, int pageSize)
        {
            return await _db.Sales_OrderTracking.OrderBy(x => x.OrderTrackingID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{orderTrackingID}", Name = "GetById_Sales_OrderTracking")]
        public async Task<ActionResult<Sales.OrderTracking>> GetOrderTracking(int orderTrackingID)
        {
            var result = await _db.Sales_OrderTracking.FirstOrDefaultAsync(x => x.OrderTrackingID == orderTrackingID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_OrderTracking")]
        public async Task<IActionResult> CreateOrderTracking([FromBody] Sales.OrderTracking value)
        {
            _db.Sales_OrderTracking.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{orderTrackingID}", Name = "Edit_Sales_OrderTracking")]
        public async Task<IActionResult> EditOrderTracking(int orderTrackingID, [FromBody] Sales.OrderTracking value)
        {
            var existing = await _db.Sales_OrderTracking.FirstOrDefaultAsync(x => x.OrderTrackingID == orderTrackingID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.OrderTrackingID = value.OrderTrackingID;
			existing.SalesOrderID = value.SalesOrderID;
			existing.CarrierTrackingNumber = value.CarrierTrackingNumber;
			existing.TrackingEventID = value.TrackingEventID;
			existing.EventDetails = value.EventDetails;
			existing.EventDateTime = value.EventDateTime;

            _db.Sales_OrderTracking.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_OrderTracking")]
        public async Task<IActionResult> DeleteOrderTracking(int orderTrackingID)
        {
            var existing = await _db.Sales_OrderTracking.FirstOrDefaultAsync(x => x.OrderTrackingID == orderTrackingID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_OrderTracking.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}