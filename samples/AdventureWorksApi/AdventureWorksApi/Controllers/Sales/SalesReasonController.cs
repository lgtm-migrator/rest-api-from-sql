// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/SalesReason")]
    [ApiController]
    public class Sales_SalesReasonController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_SalesReasonController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_SalesReason")]
        public async Task<ActionResult<IEnumerable<Sales.SalesReason>>> ListSalesReason(int pageIndex, int pageSize)
        {
            return await _db.Sales_SalesReason.OrderBy(x => x.SalesReasonID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{salesReasonID}", Name = "GetById_Sales_SalesReason")]
        public async Task<ActionResult<Sales.SalesReason>> GetSalesReason(int salesReasonID)
        {
            var result = await _db.Sales_SalesReason.FirstOrDefaultAsync(x => x.SalesReasonID == salesReasonID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_SalesReason")]
        public async Task<IActionResult> CreateSalesReason([FromBody] Sales.SalesReason value)
        {
            _db.Sales_SalesReason.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{salesReasonID}", Name = "Edit_Sales_SalesReason")]
        public async Task<IActionResult> EditSalesReason(int salesReasonID, [FromBody] Sales.SalesReason value)
        {
            var existing = await _db.Sales_SalesReason.FirstOrDefaultAsync(x => x.SalesReasonID == salesReasonID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.SalesReasonID = value.SalesReasonID;
			existing.Name = value.Name;
			existing.ReasonType = value.ReasonType;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_SalesReason.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_SalesReason")]
        public async Task<IActionResult> DeleteSalesReason(int salesReasonID)
        {
            var existing = await _db.Sales_SalesReason.FirstOrDefaultAsync(x => x.SalesReasonID == salesReasonID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_SalesReason.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}