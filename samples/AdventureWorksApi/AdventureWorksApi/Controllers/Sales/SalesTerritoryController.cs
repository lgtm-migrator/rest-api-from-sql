// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/SalesTerritory")]
    [ApiController]
    public class Sales_SalesTerritoryController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_SalesTerritoryController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_SalesTerritory")]
        public async Task<ActionResult<IEnumerable<Sales.SalesTerritory>>> ListSalesTerritory(int pageIndex, int pageSize)
        {
            return await _db.Sales_SalesTerritory.OrderBy(x => x.TerritoryID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{territoryID}", Name = "GetById_Sales_SalesTerritory")]
        public async Task<ActionResult<Sales.SalesTerritory>> GetSalesTerritory(int territoryID)
        {
            var result = await _db.Sales_SalesTerritory.FirstOrDefaultAsync(x => x.TerritoryID == territoryID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_SalesTerritory")]
        public async Task<IActionResult> CreateSalesTerritory([FromBody] Sales.SalesTerritory value)
        {
            _db.Sales_SalesTerritory.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{territoryID}", Name = "Edit_Sales_SalesTerritory")]
        public async Task<IActionResult> EditSalesTerritory(int territoryID, [FromBody] Sales.SalesTerritory value)
        {
            var existing = await _db.Sales_SalesTerritory.FirstOrDefaultAsync(x => x.TerritoryID == territoryID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.TerritoryID = value.TerritoryID;
			existing.Name = value.Name;
			existing.CountryRegionCode = value.CountryRegionCode;
			existing.Group = value.Group;
			existing.SalesYTD = value.SalesYTD;
			existing.SalesLastYear = value.SalesLastYear;
			existing.CostYTD = value.CostYTD;
			existing.CostLastYear = value.CostLastYear;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_SalesTerritory.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_SalesTerritory")]
        public async Task<IActionResult> DeleteSalesTerritory(int territoryID)
        {
            var existing = await _db.Sales_SalesTerritory.FirstOrDefaultAsync(x => x.TerritoryID == territoryID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_SalesTerritory.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}