// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Sales/Customer")]
    [ApiController]
    public class Sales_CustomerController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Sales_CustomerController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Sales_Customer")]
        public async Task<ActionResult<IEnumerable<Sales.Customer>>> ListCustomer(int pageIndex, int pageSize)
        {
            return await _db.Sales_Customer.OrderBy(x => x.CustomerID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{customerID}", Name = "GetById_Sales_Customer")]
        public async Task<ActionResult<Sales.Customer>> GetCustomer(int customerID)
        {
            var result = await _db.Sales_Customer.FirstOrDefaultAsync(x => x.CustomerID == customerID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Sales_Customer")]
        public async Task<IActionResult> CreateCustomer([FromBody] Sales.Customer value)
        {
            _db.Sales_Customer.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{customerID}", Name = "Edit_Sales_Customer")]
        public async Task<IActionResult> EditCustomer(int customerID, [FromBody] Sales.Customer value)
        {
            var existing = await _db.Sales_Customer.FirstOrDefaultAsync(x => x.CustomerID == customerID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.CustomerID = value.CustomerID;
			existing.PersonID = value.PersonID;
			existing.StoreID = value.StoreID;
			existing.TerritoryID = value.TerritoryID;
			existing.AccountNumber = value.AccountNumber;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Sales_Customer.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Sales_Customer")]
        public async Task<IActionResult> DeleteCustomer(int customerID)
        {
            var existing = await _db.Sales_Customer.FirstOrDefaultAsync(x => x.CustomerID == customerID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Sales_Customer.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}