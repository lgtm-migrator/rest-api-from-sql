// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Person/Password")]
    [ApiController]
    public class Person_PasswordController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Person_PasswordController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Person_Password")]
        public async Task<ActionResult<IEnumerable<Person.Password>>> ListPassword(int pageIndex, int pageSize)
        {
            return await _db.Person_Password.OrderBy(x => x.BusinessEntityID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{businessEntityID}", Name = "GetById_Person_Password")]
        public async Task<ActionResult<Person.Password>> GetPassword(int businessEntityID)
        {
            var result = await _db.Person_Password.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Person_Password")]
        public async Task<IActionResult> CreatePassword([FromBody] Person.Password value)
        {
            _db.Person_Password.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{businessEntityID}", Name = "Edit_Person_Password")]
        public async Task<IActionResult> EditPassword(int businessEntityID, [FromBody] Person.Password value)
        {
            var existing = await _db.Person_Password.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.BusinessEntityID = value.BusinessEntityID;
			existing.PasswordHash = value.PasswordHash;
			existing.PasswordSalt = value.PasswordSalt;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Person_Password.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Person_Password")]
        public async Task<IActionResult> DeletePassword(int businessEntityID)
        {
            var existing = await _db.Person_Password.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Person_Password.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}