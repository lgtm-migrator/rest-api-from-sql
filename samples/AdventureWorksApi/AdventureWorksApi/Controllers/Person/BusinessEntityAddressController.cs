// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Person/BusinessEntityAddress")]
    [ApiController]
    public class Person_BusinessEntityAddressController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Person_BusinessEntityAddressController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Person_BusinessEntityAddress")]
        public async Task<ActionResult<IEnumerable<Person.BusinessEntityAddress>>> ListBusinessEntityAddress(int pageIndex, int pageSize)
        {
            return await _db.Person_BusinessEntityAddress.OrderBy(x => x.AddressID).ThenBy(x => x.AddressTypeID).ThenBy(x => x.BusinessEntityID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("addressID/{addressID}/addressTypeID/{addressTypeID}/businessEntityID/{businessEntityID}", Name = "GetById_Person_BusinessEntityAddress")]
        public async Task<ActionResult<Person.BusinessEntityAddress>> GetBusinessEntityAddress(int addressID, int addressTypeID, int businessEntityID)
        {
            var result = await _db.Person_BusinessEntityAddress.FirstOrDefaultAsync(x => x.AddressID == addressID && x.AddressTypeID == addressTypeID && x.BusinessEntityID == businessEntityID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Person_BusinessEntityAddress")]
        public async Task<IActionResult> CreateBusinessEntityAddress([FromBody] Person.BusinessEntityAddress value)
        {
            _db.Person_BusinessEntityAddress.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("addressID/{addressID}/addressTypeID/{addressTypeID}/businessEntityID/{businessEntityID}", Name = "Edit_Person_BusinessEntityAddress")]
        public async Task<IActionResult> EditBusinessEntityAddress(int addressID, int addressTypeID, int businessEntityID, [FromBody] Person.BusinessEntityAddress value)
        {
            var existing = await _db.Person_BusinessEntityAddress.FirstOrDefaultAsync(x => x.AddressID == addressID && x.AddressTypeID == addressTypeID && x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.BusinessEntityID = value.BusinessEntityID;
			existing.AddressID = value.AddressID;
			existing.AddressTypeID = value.AddressTypeID;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Person_BusinessEntityAddress.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Person_BusinessEntityAddress")]
        public async Task<IActionResult> DeleteBusinessEntityAddress(int addressID, int addressTypeID, int businessEntityID)
        {
            var existing = await _db.Person_BusinessEntityAddress.FirstOrDefaultAsync(x => x.AddressID == addressID && x.AddressTypeID == addressTypeID && x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Person_BusinessEntityAddress.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}