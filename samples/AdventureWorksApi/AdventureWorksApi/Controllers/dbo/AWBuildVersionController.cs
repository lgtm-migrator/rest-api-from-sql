// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/dbo/AWBuildVersion")]
    [ApiController]
    public class dbo_AWBuildVersionController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public dbo_AWBuildVersionController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_dbo_AWBuildVersion")]
        public async Task<ActionResult<IEnumerable<dbo.AWBuildVersion>>> ListAWBuildVersion(int pageIndex, int pageSize)
        {
            return await _db.dbo_AWBuildVersion.OrderBy(x => x.SystemInformationID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{systemInformationID}", Name = "GetById_dbo_AWBuildVersion")]
        public async Task<ActionResult<dbo.AWBuildVersion>> GetAWBuildVersion(byte systemInformationID)
        {
            var result = await _db.dbo_AWBuildVersion.FirstOrDefaultAsync(x => x.SystemInformationID == systemInformationID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_dbo_AWBuildVersion")]
        public async Task<IActionResult> CreateAWBuildVersion([FromBody] dbo.AWBuildVersion value)
        {
            _db.dbo_AWBuildVersion.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{systemInformationID}", Name = "Edit_dbo_AWBuildVersion")]
        public async Task<IActionResult> EditAWBuildVersion(byte systemInformationID, [FromBody] dbo.AWBuildVersion value)
        {
            var existing = await _db.dbo_AWBuildVersion.FirstOrDefaultAsync(x => x.SystemInformationID == systemInformationID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.SystemInformationID = value.SystemInformationID;
			existing.Database_Version = value.Database_Version;
			existing.VersionDate = value.VersionDate;
			existing.ModifiedDate = value.ModifiedDate;

            _db.dbo_AWBuildVersion.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_dbo_AWBuildVersion")]
        public async Task<IActionResult> DeleteAWBuildVersion(byte systemInformationID)
        {
            var existing = await _db.dbo_AWBuildVersion.FirstOrDefaultAsync(x => x.SystemInformationID == systemInformationID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.dbo_AWBuildVersion.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}