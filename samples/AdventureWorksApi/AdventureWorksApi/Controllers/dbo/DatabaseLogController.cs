// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/dbo/DatabaseLog")]
    [ApiController]
    public class dbo_DatabaseLogController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public dbo_DatabaseLogController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_dbo_DatabaseLog")]
        public async Task<ActionResult<IEnumerable<dbo.DatabaseLog>>> ListDatabaseLog(int pageIndex, int pageSize)
        {
            return await _db.dbo_DatabaseLog.OrderBy(x => x.DatabaseLogID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{databaseLogID}", Name = "GetById_dbo_DatabaseLog")]
        public async Task<ActionResult<dbo.DatabaseLog>> GetDatabaseLog(int databaseLogID)
        {
            var result = await _db.dbo_DatabaseLog.FirstOrDefaultAsync(x => x.DatabaseLogID == databaseLogID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_dbo_DatabaseLog")]
        public async Task<IActionResult> CreateDatabaseLog([FromBody] dbo.DatabaseLog value)
        {
            _db.dbo_DatabaseLog.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{databaseLogID}", Name = "Edit_dbo_DatabaseLog")]
        public async Task<IActionResult> EditDatabaseLog(int databaseLogID, [FromBody] dbo.DatabaseLog value)
        {
            var existing = await _db.dbo_DatabaseLog.FirstOrDefaultAsync(x => x.DatabaseLogID == databaseLogID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.DatabaseLogID = value.DatabaseLogID;
			existing.PostTime = value.PostTime;
			existing.DatabaseUser = value.DatabaseUser;
			existing.Event = value.Event;
			existing.Schema = value.Schema;
			existing.Object = value.Object;
			existing.TSQL = value.TSQL;
			existing.XmlEvent = value.XmlEvent;

            _db.dbo_DatabaseLog.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_dbo_DatabaseLog")]
        public async Task<IActionResult> DeleteDatabaseLog(int databaseLogID)
        {
            var existing = await _db.dbo_DatabaseLog.FirstOrDefaultAsync(x => x.DatabaseLogID == databaseLogID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.dbo_DatabaseLog.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}