// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/HumanResources/Employee")]
    [ApiController]
    public class HumanResources_EmployeeController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public HumanResources_EmployeeController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_HumanResources_Employee")]
        public async Task<ActionResult<IEnumerable<HumanResources.Employee>>> ListEmployee(int pageIndex, int pageSize)
        {
            return await _db.HumanResources_Employee.OrderBy(x => x.BusinessEntityID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{businessEntityID}", Name = "GetById_HumanResources_Employee")]
        public async Task<ActionResult<HumanResources.Employee>> GetEmployee(int businessEntityID)
        {
            var result = await _db.HumanResources_Employee.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_HumanResources_Employee")]
        public async Task<IActionResult> CreateEmployee([FromBody] HumanResources.Employee value)
        {
            _db.HumanResources_Employee.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{businessEntityID}", Name = "Edit_HumanResources_Employee")]
        public async Task<IActionResult> EditEmployee(int businessEntityID, [FromBody] HumanResources.Employee value)
        {
            var existing = await _db.HumanResources_Employee.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.BusinessEntityID = value.BusinessEntityID;
			existing.NationalIDNumber = value.NationalIDNumber;
			existing.LoginID = value.LoginID;
			existing.OrganizationNode = value.OrganizationNode;
			existing.OrganizationLevel = value.OrganizationLevel;
			existing.JobTitle = value.JobTitle;
			existing.BirthDate = value.BirthDate;
			existing.MaritalStatus = value.MaritalStatus;
			existing.Gender = value.Gender;
			existing.HireDate = value.HireDate;
			existing.SalariedFlag = value.SalariedFlag;
			existing.VacationHours = value.VacationHours;
			existing.SickLeaveHours = value.SickLeaveHours;
			existing.CurrentFlag = value.CurrentFlag;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.HumanResources_Employee.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_HumanResources_Employee")]
        public async Task<IActionResult> DeleteEmployee(int businessEntityID)
        {
            var existing = await _db.HumanResources_Employee.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.HumanResources_Employee.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}