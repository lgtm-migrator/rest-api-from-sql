// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/HumanResources/EmployeeDepartmentHistory")]
    [ApiController]
    public class HumanResources_EmployeeDepartmentHistoryController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public HumanResources_EmployeeDepartmentHistoryController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_HumanResources_EmployeeDepartmentHistory")]
        public async Task<ActionResult<IEnumerable<HumanResources.EmployeeDepartmentHistory>>> ListEmployeeDepartmentHistory(int pageIndex, int pageSize)
        {
            return await _db.HumanResources_EmployeeDepartmentHistory.OrderBy(x => x.BusinessEntityID).ThenBy(x => x.DepartmentID).ThenBy(x => x.ShiftID).ThenBy(x => x.StartDate).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("businessEntityID/{businessEntityID}/departmentID/{departmentID}/shiftID/{shiftID}/startDate/{startDate}", Name = "GetById_HumanResources_EmployeeDepartmentHistory")]
        public async Task<ActionResult<HumanResources.EmployeeDepartmentHistory>> GetEmployeeDepartmentHistory(int businessEntityID, short departmentID, byte shiftID, DateTime startDate)
        {
            var result = await _db.HumanResources_EmployeeDepartmentHistory.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.DepartmentID == departmentID && x.ShiftID == shiftID && x.StartDate == startDate);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_HumanResources_EmployeeDepartmentHistory")]
        public async Task<IActionResult> CreateEmployeeDepartmentHistory([FromBody] HumanResources.EmployeeDepartmentHistory value)
        {
            _db.HumanResources_EmployeeDepartmentHistory.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("businessEntityID/{businessEntityID}/departmentID/{departmentID}/shiftID/{shiftID}/startDate/{startDate}", Name = "Edit_HumanResources_EmployeeDepartmentHistory")]
        public async Task<IActionResult> EditEmployeeDepartmentHistory(int businessEntityID, short departmentID, byte shiftID, DateTime startDate, [FromBody] HumanResources.EmployeeDepartmentHistory value)
        {
            var existing = await _db.HumanResources_EmployeeDepartmentHistory.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.DepartmentID == departmentID && x.ShiftID == shiftID && x.StartDate == startDate);
            if (existing == null)
            {
                return NotFound();
            }

			existing.BusinessEntityID = value.BusinessEntityID;
			existing.DepartmentID = value.DepartmentID;
			existing.ShiftID = value.ShiftID;
			existing.StartDate = value.StartDate;
			existing.EndDate = value.EndDate;
			existing.ModifiedDate = value.ModifiedDate;

            _db.HumanResources_EmployeeDepartmentHistory.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_HumanResources_EmployeeDepartmentHistory")]
        public async Task<IActionResult> DeleteEmployeeDepartmentHistory(int businessEntityID, short departmentID, byte shiftID, DateTime startDate)
        {
            var existing = await _db.HumanResources_EmployeeDepartmentHistory.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.DepartmentID == departmentID && x.ShiftID == shiftID && x.StartDate == startDate);
            if (existing == null)
            {
                return NotFound();
            }
            _db.HumanResources_EmployeeDepartmentHistory.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}