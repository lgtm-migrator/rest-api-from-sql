// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Purchasing/PurchaseOrderDetail")]
    [ApiController]
    public class Purchasing_PurchaseOrderDetailController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Purchasing_PurchaseOrderDetailController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Purchasing_PurchaseOrderDetail")]
        public async Task<ActionResult<IEnumerable<Purchasing.PurchaseOrderDetail>>> ListPurchaseOrderDetail(int pageIndex, int pageSize)
        {
            return await _db.Purchasing_PurchaseOrderDetail.OrderBy(x => x.PurchaseOrderDetailID).ThenBy(x => x.PurchaseOrderID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("purchaseOrderDetailID/{purchaseOrderDetailID}/purchaseOrderID/{purchaseOrderID}", Name = "GetById_Purchasing_PurchaseOrderDetail")]
        public async Task<ActionResult<Purchasing.PurchaseOrderDetail>> GetPurchaseOrderDetail(int purchaseOrderDetailID, int purchaseOrderID)
        {
            var result = await _db.Purchasing_PurchaseOrderDetail.FirstOrDefaultAsync(x => x.PurchaseOrderDetailID == purchaseOrderDetailID && x.PurchaseOrderID == purchaseOrderID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Purchasing_PurchaseOrderDetail")]
        public async Task<IActionResult> CreatePurchaseOrderDetail([FromBody] Purchasing.PurchaseOrderDetail value)
        {
            _db.Purchasing_PurchaseOrderDetail.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("purchaseOrderDetailID/{purchaseOrderDetailID}/purchaseOrderID/{purchaseOrderID}", Name = "Edit_Purchasing_PurchaseOrderDetail")]
        public async Task<IActionResult> EditPurchaseOrderDetail(int purchaseOrderDetailID, int purchaseOrderID, [FromBody] Purchasing.PurchaseOrderDetail value)
        {
            var existing = await _db.Purchasing_PurchaseOrderDetail.FirstOrDefaultAsync(x => x.PurchaseOrderDetailID == purchaseOrderDetailID && x.PurchaseOrderID == purchaseOrderID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.PurchaseOrderID = value.PurchaseOrderID;
			existing.PurchaseOrderDetailID = value.PurchaseOrderDetailID;
			existing.DueDate = value.DueDate;
			existing.OrderQty = value.OrderQty;
			existing.ProductID = value.ProductID;
			existing.UnitPrice = value.UnitPrice;
			existing.LineTotal = value.LineTotal;
			existing.ReceivedQty = value.ReceivedQty;
			existing.RejectedQty = value.RejectedQty;
			existing.StockedQty = value.StockedQty;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Purchasing_PurchaseOrderDetail.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Purchasing_PurchaseOrderDetail")]
        public async Task<IActionResult> DeletePurchaseOrderDetail(int purchaseOrderDetailID, int purchaseOrderID)
        {
            var existing = await _db.Purchasing_PurchaseOrderDetail.FirstOrDefaultAsync(x => x.PurchaseOrderDetailID == purchaseOrderDetailID && x.PurchaseOrderID == purchaseOrderID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Purchasing_PurchaseOrderDetail.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}