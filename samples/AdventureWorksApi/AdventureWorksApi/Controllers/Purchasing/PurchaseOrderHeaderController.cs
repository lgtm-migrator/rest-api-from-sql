// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Purchasing/PurchaseOrderHeader")]
    [ApiController]
    public class Purchasing_PurchaseOrderHeaderController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Purchasing_PurchaseOrderHeaderController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Purchasing_PurchaseOrderHeader")]
        public async Task<ActionResult<IEnumerable<Purchasing.PurchaseOrderHeader>>> ListPurchaseOrderHeader(int pageIndex, int pageSize)
        {
            return await _db.Purchasing_PurchaseOrderHeader.OrderBy(x => x.PurchaseOrderID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{purchaseOrderID}", Name = "GetById_Purchasing_PurchaseOrderHeader")]
        public async Task<ActionResult<Purchasing.PurchaseOrderHeader>> GetPurchaseOrderHeader(int purchaseOrderID)
        {
            var result = await _db.Purchasing_PurchaseOrderHeader.FirstOrDefaultAsync(x => x.PurchaseOrderID == purchaseOrderID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Purchasing_PurchaseOrderHeader")]
        public async Task<IActionResult> CreatePurchaseOrderHeader([FromBody] Purchasing.PurchaseOrderHeader value)
        {
            _db.Purchasing_PurchaseOrderHeader.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{purchaseOrderID}", Name = "Edit_Purchasing_PurchaseOrderHeader")]
        public async Task<IActionResult> EditPurchaseOrderHeader(int purchaseOrderID, [FromBody] Purchasing.PurchaseOrderHeader value)
        {
            var existing = await _db.Purchasing_PurchaseOrderHeader.FirstOrDefaultAsync(x => x.PurchaseOrderID == purchaseOrderID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.PurchaseOrderID = value.PurchaseOrderID;
			existing.RevisionNumber = value.RevisionNumber;
			existing.Status = value.Status;
			existing.EmployeeID = value.EmployeeID;
			existing.VendorID = value.VendorID;
			existing.ShipMethodID = value.ShipMethodID;
			existing.OrderDate = value.OrderDate;
			existing.ShipDate = value.ShipDate;
			existing.SubTotal = value.SubTotal;
			existing.TaxAmt = value.TaxAmt;
			existing.Freight = value.Freight;
			existing.TotalDue = value.TotalDue;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Purchasing_PurchaseOrderHeader.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Purchasing_PurchaseOrderHeader")]
        public async Task<IActionResult> DeletePurchaseOrderHeader(int purchaseOrderID)
        {
            var existing = await _db.Purchasing_PurchaseOrderHeader.FirstOrDefaultAsync(x => x.PurchaseOrderID == purchaseOrderID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Purchasing_PurchaseOrderHeader.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}