// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Purchasing/ShipMethod")]
    [ApiController]
    public class Purchasing_ShipMethodController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Purchasing_ShipMethodController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Purchasing_ShipMethod")]
        public async Task<ActionResult<IEnumerable<Purchasing.ShipMethod>>> ListShipMethod(int pageIndex, int pageSize)
        {
            return await _db.Purchasing_ShipMethod.OrderBy(x => x.ShipMethodID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{shipMethodID}", Name = "GetById_Purchasing_ShipMethod")]
        public async Task<ActionResult<Purchasing.ShipMethod>> GetShipMethod(int shipMethodID)
        {
            var result = await _db.Purchasing_ShipMethod.FirstOrDefaultAsync(x => x.ShipMethodID == shipMethodID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Purchasing_ShipMethod")]
        public async Task<IActionResult> CreateShipMethod([FromBody] Purchasing.ShipMethod value)
        {
            _db.Purchasing_ShipMethod.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{shipMethodID}", Name = "Edit_Purchasing_ShipMethod")]
        public async Task<IActionResult> EditShipMethod(int shipMethodID, [FromBody] Purchasing.ShipMethod value)
        {
            var existing = await _db.Purchasing_ShipMethod.FirstOrDefaultAsync(x => x.ShipMethodID == shipMethodID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.ShipMethodID = value.ShipMethodID;
			existing.Name = value.Name;
			existing.ShipBase = value.ShipBase;
			existing.ShipRate = value.ShipRate;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Purchasing_ShipMethod.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Purchasing_ShipMethod")]
        public async Task<IActionResult> DeleteShipMethod(int shipMethodID)
        {
            var existing = await _db.Purchasing_ShipMethod.FirstOrDefaultAsync(x => x.ShipMethodID == shipMethodID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Purchasing_ShipMethod.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}