// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Purchasing/ProductVendor")]
    [ApiController]
    public class Purchasing_ProductVendorController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Purchasing_ProductVendorController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Purchasing_ProductVendor")]
        public async Task<ActionResult<IEnumerable<Purchasing.ProductVendor>>> ListProductVendor(int pageIndex, int pageSize)
        {
            return await _db.Purchasing_ProductVendor.OrderBy(x => x.BusinessEntityID).ThenBy(x => x.ProductID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("businessEntityID/{businessEntityID}/productID/{productID}", Name = "GetById_Purchasing_ProductVendor")]
        public async Task<ActionResult<Purchasing.ProductVendor>> GetProductVendor(int businessEntityID, int productID)
        {
            var result = await _db.Purchasing_ProductVendor.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.ProductID == productID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Purchasing_ProductVendor")]
        public async Task<IActionResult> CreateProductVendor([FromBody] Purchasing.ProductVendor value)
        {
            _db.Purchasing_ProductVendor.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("businessEntityID/{businessEntityID}/productID/{productID}", Name = "Edit_Purchasing_ProductVendor")]
        public async Task<IActionResult> EditProductVendor(int businessEntityID, int productID, [FromBody] Purchasing.ProductVendor value)
        {
            var existing = await _db.Purchasing_ProductVendor.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.ProductID == productID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.ProductID = value.ProductID;
			existing.BusinessEntityID = value.BusinessEntityID;
			existing.AverageLeadTime = value.AverageLeadTime;
			existing.StandardPrice = value.StandardPrice;
			existing.LastReceiptCost = value.LastReceiptCost;
			existing.LastReceiptDate = value.LastReceiptDate;
			existing.MinOrderQty = value.MinOrderQty;
			existing.MaxOrderQty = value.MaxOrderQty;
			existing.OnOrderQty = value.OnOrderQty;
			existing.UnitMeasureCode = value.UnitMeasureCode;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Purchasing_ProductVendor.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Purchasing_ProductVendor")]
        public async Task<IActionResult> DeleteProductVendor(int businessEntityID, int productID)
        {
            var existing = await _db.Purchasing_ProductVendor.FirstOrDefaultAsync(x => x.BusinessEntityID == businessEntityID && x.ProductID == productID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Purchasing_ProductVendor.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}