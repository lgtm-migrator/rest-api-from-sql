// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Production/ProductListPriceHistory")]
    [ApiController]
    public class Production_ProductListPriceHistoryController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Production_ProductListPriceHistoryController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Production_ProductListPriceHistory")]
        public async Task<ActionResult<IEnumerable<Production.ProductListPriceHistory>>> ListProductListPriceHistory(int pageIndex, int pageSize)
        {
            return await _db.Production_ProductListPriceHistory.OrderBy(x => x.ProductID).ThenBy(x => x.StartDate).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("productID/{productID}/startDate/{startDate}", Name = "GetById_Production_ProductListPriceHistory")]
        public async Task<ActionResult<Production.ProductListPriceHistory>> GetProductListPriceHistory(int productID, DateTime startDate)
        {
            var result = await _db.Production_ProductListPriceHistory.FirstOrDefaultAsync(x => x.ProductID == productID && x.StartDate == startDate);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Production_ProductListPriceHistory")]
        public async Task<IActionResult> CreateProductListPriceHistory([FromBody] Production.ProductListPriceHistory value)
        {
            _db.Production_ProductListPriceHistory.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("productID/{productID}/startDate/{startDate}", Name = "Edit_Production_ProductListPriceHistory")]
        public async Task<IActionResult> EditProductListPriceHistory(int productID, DateTime startDate, [FromBody] Production.ProductListPriceHistory value)
        {
            var existing = await _db.Production_ProductListPriceHistory.FirstOrDefaultAsync(x => x.ProductID == productID && x.StartDate == startDate);
            if (existing == null)
            {
                return NotFound();
            }

			existing.ProductID = value.ProductID;
			existing.StartDate = value.StartDate;
			existing.EndDate = value.EndDate;
			existing.ListPrice = value.ListPrice;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_ProductListPriceHistory.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Production_ProductListPriceHistory")]
        public async Task<IActionResult> DeleteProductListPriceHistory(int productID, DateTime startDate)
        {
            var existing = await _db.Production_ProductListPriceHistory.FirstOrDefaultAsync(x => x.ProductID == productID && x.StartDate == startDate);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_ProductListPriceHistory.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}