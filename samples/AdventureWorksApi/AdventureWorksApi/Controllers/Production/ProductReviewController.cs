// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Production/ProductReview")]
    [ApiController]
    public class Production_ProductReviewController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Production_ProductReviewController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Production_ProductReview")]
        public async Task<ActionResult<IEnumerable<Production.ProductReview>>> ListProductReview(int pageIndex, int pageSize)
        {
            return await _db.Production_ProductReview.OrderBy(x => x.ProductReviewID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{productReviewID}", Name = "GetById_Production_ProductReview")]
        public async Task<ActionResult<Production.ProductReview>> GetProductReview(int productReviewID)
        {
            var result = await _db.Production_ProductReview.FirstOrDefaultAsync(x => x.ProductReviewID == productReviewID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Production_ProductReview")]
        public async Task<IActionResult> CreateProductReview([FromBody] Production.ProductReview value)
        {
            _db.Production_ProductReview.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{productReviewID}", Name = "Edit_Production_ProductReview")]
        public async Task<IActionResult> EditProductReview(int productReviewID, [FromBody] Production.ProductReview value)
        {
            var existing = await _db.Production_ProductReview.FirstOrDefaultAsync(x => x.ProductReviewID == productReviewID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.ProductReviewID = value.ProductReviewID;
			existing.ProductID = value.ProductID;
			existing.ReviewerName = value.ReviewerName;
			existing.ReviewDate = value.ReviewDate;
			existing.EmailAddress = value.EmailAddress;
			existing.Rating = value.Rating;
			existing.Comments = value.Comments;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_ProductReview.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Production_ProductReview")]
        public async Task<IActionResult> DeleteProductReview(int productReviewID)
        {
            var existing = await _db.Production_ProductReview.FirstOrDefaultAsync(x => x.ProductReviewID == productReviewID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_ProductReview.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}