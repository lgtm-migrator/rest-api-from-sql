// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Production/UnitMeasure")]
    [ApiController]
    public class Production_UnitMeasureController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Production_UnitMeasureController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Production_UnitMeasure")]
        public async Task<ActionResult<IEnumerable<Production.UnitMeasure>>> ListUnitMeasure(int pageIndex, int pageSize)
        {
            return await _db.Production_UnitMeasure.OrderBy(x => x.UnitMeasureCode).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{unitMeasureCode}", Name = "GetById_Production_UnitMeasure")]
        public async Task<ActionResult<Production.UnitMeasure>> GetUnitMeasure(string unitMeasureCode)
        {
            var result = await _db.Production_UnitMeasure.FirstOrDefaultAsync(x => x.UnitMeasureCode == unitMeasureCode);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Production_UnitMeasure")]
        public async Task<IActionResult> CreateUnitMeasure([FromBody] Production.UnitMeasure value)
        {
            _db.Production_UnitMeasure.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{unitMeasureCode}", Name = "Edit_Production_UnitMeasure")]
        public async Task<IActionResult> EditUnitMeasure(string unitMeasureCode, [FromBody] Production.UnitMeasure value)
        {
            var existing = await _db.Production_UnitMeasure.FirstOrDefaultAsync(x => x.UnitMeasureCode == unitMeasureCode);
            if (existing == null)
            {
                return NotFound();
            }

			existing.UnitMeasureCode = value.UnitMeasureCode;
			existing.Name = value.Name;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_UnitMeasure.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Production_UnitMeasure")]
        public async Task<IActionResult> DeleteUnitMeasure(string unitMeasureCode)
        {
            var existing = await _db.Production_UnitMeasure.FirstOrDefaultAsync(x => x.UnitMeasureCode == unitMeasureCode);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_UnitMeasure.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}