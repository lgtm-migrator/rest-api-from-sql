// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Production/Document")]
    [ApiController]
    public class Production_DocumentController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Production_DocumentController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Production_Document")]
        public async Task<ActionResult<IEnumerable<Production.Document>>> ListDocument(int pageIndex, int pageSize)
        {
            return await _db.Production_Document.OrderBy(x => x.DocumentNode).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{documentNode}", Name = "GetById_Production_Document")]
        public async Task<ActionResult<Production.Document>> GetDocument(string documentNode)
        {
            var result = await _db.Production_Document.FirstOrDefaultAsync(x => x.DocumentNode == documentNode);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Production_Document")]
        public async Task<IActionResult> CreateDocument([FromBody] Production.Document value)
        {
            _db.Production_Document.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{documentNode}", Name = "Edit_Production_Document")]
        public async Task<IActionResult> EditDocument(string documentNode, [FromBody] Production.Document value)
        {
            var existing = await _db.Production_Document.FirstOrDefaultAsync(x => x.DocumentNode == documentNode);
            if (existing == null)
            {
                return NotFound();
            }

			existing.DocumentNode = value.DocumentNode;
			existing.DocumentLevel = value.DocumentLevel;
			existing.Title = value.Title;
			existing.Owner = value.Owner;
			existing.FolderFlag = value.FolderFlag;
			existing.FileName = value.FileName;
			existing.FileExtension = value.FileExtension;
			existing.Revision = value.Revision;
			existing.ChangeNumber = value.ChangeNumber;
			existing.Status = value.Status;
			existing.DocumentSummary = value.DocumentSummary;
			existing.Document1 = value.Document1;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_Document.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Production_Document")]
        public async Task<IActionResult> DeleteDocument(string documentNode)
        {
            var existing = await _db.Production_Document.FirstOrDefaultAsync(x => x.DocumentNode == documentNode);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_Document.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpGet]
        [Route("rowguid", Name = "Get_Production_Document_By_rowguid")]
        public async Task<ActionResult<Production.Document>> GetDocumentByrowguid(Guid rowguid)
        {
            var result = await _db.Production_Document.FirstOrDefaultAsync(x => x.rowguid == rowguid);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }


		[HttpPut("rowguid", Name = "Edit_Production_Document_By_rowguid")]
        public async Task<IActionResult> EditDocumentByrowguid(Guid rowguid, [FromBody] Production.Document value)
        {
            var existing = await _db.Production_Document.FirstOrDefaultAsync(x => x.rowguid == rowguid);
            if (existing == null)
            {
                return NotFound();
            }

			existing.DocumentNode = value.DocumentNode;
			existing.DocumentLevel = value.DocumentLevel;
			existing.Title = value.Title;
			existing.Owner = value.Owner;
			existing.FolderFlag = value.FolderFlag;
			existing.FileName = value.FileName;
			existing.FileExtension = value.FileExtension;
			existing.Revision = value.Revision;
			existing.ChangeNumber = value.ChangeNumber;
			existing.Status = value.Status;
			existing.DocumentSummary = value.DocumentSummary;
			existing.Document1 = value.Document1;
			existing.rowguid = value.rowguid;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_Document.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }


		[HttpDelete("rowguid", Name = "Delete_Production_Document_By_rowguid")]
        public async Task<IActionResult> DeleteDocumentByrowguid(Guid rowguid)
        {
            var existing = await _db.Production_Document.FirstOrDefaultAsync(x => x.rowguid == rowguid);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_Document.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }


	}
}