// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Production/ProductPhoto")]
    [ApiController]
    public class Production_ProductPhotoController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Production_ProductPhotoController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Production_ProductPhoto")]
        public async Task<ActionResult<IEnumerable<Production.ProductPhoto>>> ListProductPhoto(int pageIndex, int pageSize)
        {
            return await _db.Production_ProductPhoto.OrderBy(x => x.ProductPhotoID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("{productPhotoID}", Name = "GetById_Production_ProductPhoto")]
        public async Task<ActionResult<Production.ProductPhoto>> GetProductPhoto(int productPhotoID)
        {
            var result = await _db.Production_ProductPhoto.FirstOrDefaultAsync(x => x.ProductPhotoID == productPhotoID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Production_ProductPhoto")]
        public async Task<IActionResult> CreateProductPhoto([FromBody] Production.ProductPhoto value)
        {
            _db.Production_ProductPhoto.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("{productPhotoID}", Name = "Edit_Production_ProductPhoto")]
        public async Task<IActionResult> EditProductPhoto(int productPhotoID, [FromBody] Production.ProductPhoto value)
        {
            var existing = await _db.Production_ProductPhoto.FirstOrDefaultAsync(x => x.ProductPhotoID == productPhotoID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.ProductPhotoID = value.ProductPhotoID;
			existing.ThumbNailPhoto = value.ThumbNailPhoto;
			existing.ThumbnailPhotoFileName = value.ThumbnailPhotoFileName;
			existing.LargePhoto = value.LargePhoto;
			existing.LargePhotoFileName = value.LargePhotoFileName;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_ProductPhoto.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Production_ProductPhoto")]
        public async Task<IActionResult> DeleteProductPhoto(int productPhotoID)
        {
            var existing = await _db.Production_ProductPhoto.FirstOrDefaultAsync(x => x.ProductPhotoID == productPhotoID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_ProductPhoto.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}