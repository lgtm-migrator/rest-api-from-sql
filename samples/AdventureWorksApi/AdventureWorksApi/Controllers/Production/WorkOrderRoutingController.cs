// DISCLAIMER
// This file contains auto generated code.
// Changes to this file may be overwritten when the files are regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoGeneratedApi.Controllers
{
    [Route("api/Production/WorkOrderRouting")]
    [ApiController]
    public class Production_WorkOrderRoutingController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public Production_WorkOrderRoutingController(ApplicationDbContext db)
        {
            _db = db;
        }

		[HttpGet]
        [Route("", Name = "List_Production_WorkOrderRouting")]
        public async Task<ActionResult<IEnumerable<Production.WorkOrderRouting>>> ListWorkOrderRouting(int pageIndex, int pageSize)
        {
            return await _db.Production_WorkOrderRouting.OrderBy(x => x.OperationSequence).ThenBy(x => x.ProductID).ThenBy(x => x.WorkOrderID).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();
        }

		[HttpGet]
        [Route("operationSequence/{operationSequence}/productID/{productID}/workOrderID/{workOrderID}", Name = "GetById_Production_WorkOrderRouting")]
        public async Task<ActionResult<Production.WorkOrderRouting>> GetWorkOrderRouting(short operationSequence, int productID, int workOrderID)
        {
            var result = await _db.Production_WorkOrderRouting.FirstOrDefaultAsync(x => x.OperationSequence == operationSequence && x.ProductID == productID && x.WorkOrderID == workOrderID);
            if (result == null)
            {
                return NotFound();
            }
            return result;
        }

		[HttpPost]
        [Route("", Name = "Create_Production_WorkOrderRouting")]
        public async Task<IActionResult> CreateWorkOrderRouting([FromBody] Production.WorkOrderRouting value)
        {
            _db.Production_WorkOrderRouting.Add(value);
            await _db.SaveChangesAsync();
            return Ok(value);
        }

		[HttpPut("operationSequence/{operationSequence}/productID/{productID}/workOrderID/{workOrderID}", Name = "Edit_Production_WorkOrderRouting")]
        public async Task<IActionResult> EditWorkOrderRouting(short operationSequence, int productID, int workOrderID, [FromBody] Production.WorkOrderRouting value)
        {
            var existing = await _db.Production_WorkOrderRouting.FirstOrDefaultAsync(x => x.OperationSequence == operationSequence && x.ProductID == productID && x.WorkOrderID == workOrderID);
            if (existing == null)
            {
                return NotFound();
            }

			existing.WorkOrderID = value.WorkOrderID;
			existing.ProductID = value.ProductID;
			existing.OperationSequence = value.OperationSequence;
			existing.LocationID = value.LocationID;
			existing.ScheduledStartDate = value.ScheduledStartDate;
			existing.ScheduledEndDate = value.ScheduledEndDate;
			existing.ActualStartDate = value.ActualStartDate;
			existing.ActualEndDate = value.ActualEndDate;
			existing.ActualResourceHrs = value.ActualResourceHrs;
			existing.PlannedCost = value.PlannedCost;
			existing.ActualCost = value.ActualCost;
			existing.ModifiedDate = value.ModifiedDate;

            _db.Production_WorkOrderRouting.Update(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		[HttpDelete("", Name = "Delete_Production_WorkOrderRouting")]
        public async Task<IActionResult> DeleteWorkOrderRouting(short operationSequence, int productID, int workOrderID)
        {
            var existing = await _db.Production_WorkOrderRouting.FirstOrDefaultAsync(x => x.OperationSequence == operationSequence && x.ProductID == productID && x.WorkOrderID == workOrderID);
            if (existing == null)
            {
                return NotFound();
            }
            _db.Production_WorkOrderRouting.Remove(existing);
            await _db.SaveChangesAsync();
            return NoContent();
        }

		// No GetByUniqueKeyActions generated

		// No EditByUniqueKeyActions generated

		// No DeleteByUniqueKeyActions generated

	}
}